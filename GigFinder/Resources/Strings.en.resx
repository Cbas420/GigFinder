<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="buttonCancelar" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="buttonCreate" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="buttonDelete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="buttonEdit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="buttonLogin" xml:space="preserve">
    <value>Log in</value>
  </data>
  <data name="buttonSave" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="comboBoxFilter" xml:space="preserve">
    <value>Filter by</value>
  </data>
  <data name="comboBoxLang" xml:space="preserve">
    <value>Songs languaje</value>
  </data>
  <data name="comboBoxMostrar" xml:space="preserve">
    <value>Show</value>
  </data>
  <data name="comboBoxOrder" xml:space="preserve">
    <value>Order by</value>
  </data>
  <data name="comboBoxUserType" xml:space="preserve">
    <value>User type</value>
  </data>
  <data name="labelCalendar" xml:space="preserve">
    <value>Programed events</value>
  </data>
  <data name="labelCommonGenres" xml:space="preserve">
    <value>Most common genres</value>
  </data>
  <data name="labelConfirPass" xml:space="preserve">
    <value>Confirm password:</value>
  </data>
  <data name="labelCoordX" xml:space="preserve">
    <value>Coordinate X:</value>
  </data>
  <data name="labelCoordY" xml:space="preserve">
    <value>Coordinate Y:</value>
  </data>
  <data name="labelCreateLocal" xml:space="preserve">
    <value>Create local</value>
  </data>
  <data name="labelCreateMusic" xml:space="preserve">
    <value>Create musician</value>
  </data>
  <data name="labelCreateUser" xml:space="preserve">
    <value>Create user</value>
  </data>
  <data name="labelDescription" xml:space="preserve">
    <value>Description:</value>
  </data>
  <data name="labelGendres" xml:space="preserve">
    <value>Musical genres:</value>
  </data>
  <data name="labelGroupSize" xml:space="preserve">
    <value>Group members:</value>
  </data>
  <data name="labelLocalCapacity" xml:space="preserve">
    <value>Local capacity:</value>
  </data>
  <data name="labelMail" xml:space="preserve">
    <value>Mail:</value>
  </data>
  <data name="labelMap" xml:space="preserve">
    <value>Locals location</value>
  </data>
  <data name="labelName" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="labelPass" xml:space="preserve">
    <value>Password:</value>
  </data>
  <data name="labelPrice" xml:space="preserve">
    <value>Contratation price:</value>
  </data>
  <data name="labelSurname" xml:space="preserve">
    <value>Surnames:</value>
  </data>
  <data name="labelUserType" xml:space="preserve">
    <value>Users type</value>
  </data>
  <data name="menuActivity" xml:space="preserve">
    <value>Activity
log</value>
  </data>
  <data name="menuData" xml:space="preserve">
    <value>Data
managment</value>
  </data>
  <data name="menuStats" xml:space="preserve">
    <value>Data
suamary</value>
  </data>
  <data name="menuUsers" xml:space="preserve">
    <value>User
management</value>
  </data>
  <data name="messageComplete" xml:space="preserve">
    <value>Please complete all fields correctly before continuing.</value>
  </data>
  <data name="messageCompleteShort" xml:space="preserve">
    <value>Incomplete fields</value>
  </data>
  <data name="messagePassCheckShort" xml:space="preserve">
    <value>Contrasenyes errònies</value>
  </data>
  <data name="messagePassCheck" xml:space="preserve">
    <value>The passwords do not match.</value>
  </data>
  <data name="titleActivity" xml:space="preserve">
    <value>Activity log</value>
  </data>
  <data name="titleData" xml:space="preserve">
    <value>Data management</value>
  </data>
  <data name="titleEditUser" xml:space="preserve">
    <value>Eit user</value>
  </data>
  <data name="titleStats" xml:space="preserve">
    <value>Data summary</value>
  </data>
  <data name="titleUsers" xml:space="preserve">
    <value>User management</value>
  </data>
  <data name="messageUserExists" xml:space="preserve">
    <value>A user with that email already exists.</value>
  </data>
  <data name="messageUserExistsShort" xml:space="preserve">
    <value>Existing user</value>
  </data>
  <data name="messageLogin" xml:space="preserve">
    <value>The username and/or password are incorrect
</value>
  </data>
  <data name="askDelete" xml:space="preserve">
    <value>Are you sure you want to delete this user?</value>
  </data>
  <data name="askDeleteShort" xml:space="preserve">
    <value>Deletion confirmation</value>
  </data>
  <data name="selectionDelete" xml:space="preserve">
    <value>Please select a user to delete.</value>
  </data>
  <data name="selectionEdit" xml:space="preserve">
    <value>Please select a user to edit.</value>
  </data>
  <data name="selectionShort" xml:space="preserve">
    <value>Required selection</value>
  </data>
  <data name="sameUserDelete" xml:space="preserve">
    <value>You cannot delete your own user.</value>
  </data>
  <data name="loginShort" xml:space="preserve">
    <value>Incorrect login</value>
  </data>
  <data name="accesMenu" xml:space="preserve">
    <value>You do not have permission to access this section of the application.</value>
  </data>
  <data name="accesMenuShort" xml:space="preserve">
    <value>Acces denied</value>
  </data>
  <data name="sameUserDeleteShort" xml:space="preserve">
    <value>Improper action</value>
  </data>
  <data name="completeIncidencie" xml:space="preserve">
    <value>Complete all fields to resolve the incident.</value>
  </data>
  <data name="titleIncidencie" xml:space="preserve">
    <value>Resolve incident</value>
  </data>
  <data name="resolutionNote" xml:space="preserve">
    <value>Resolution note:</value>
  </data>
  <data name="resolutionState" xml:space="preserve">
    <value>Resolution state:</value>
  </data>
  <data name="askDeleteRating" xml:space="preserve">
    <value>Are you sure you want to delete that review?</value>
  </data>
  <data name="selectRating" xml:space="preserve">
    <value>Select a rating to delete.</value>
  </data>
  <data name="titleRatings" xml:space="preserve">
    <value>Ratings management</value>
  </data>
  <data name="labelEditLocal" xml:space="preserve">
    <value>Edit local</value>
  </data>
  <data name="existingLocal" xml:space="preserve">
    <value>A user with that email already exists.</value>
  </data>
  <data name="existingLocalShort" xml:space="preserve">
    <value>Existing local</value>
  </data>
  <data name="labelEditMusic" xml:space="preserve">
    <value>Edit musician</value>
  </data>
  <data name="existingMusician" xml:space="preserve">
    <value>There is already a musician with that email.</value>
  </data>
  <data name="existingMusicianShort" xml:space="preserve">
    <value>Existing musician</value>
  </data>
  <data name="musiciansManage" xml:space="preserve">
    <value>Musicians
management</value>
  </data>
  <data name="LocalsManage" xml:space="preserve">
    <value>Locals
management</value>
  </data>
  <data name="ratingsManage" xml:space="preserve">
    <value>Ratings
Management</value>
  </data>
  <data name="incidenciesManage" xml:space="preserve">
    <value>Incidencies
management</value>
  </data>
</root>